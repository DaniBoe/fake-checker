"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "pages/api/usage-stats";
exports.ids = ["pages/api/usage-stats"];
exports.modules = {

/***/ "@supabase/supabase-js":
/*!****************************************!*\
  !*** external "@supabase/supabase-js" ***!
  \****************************************/
/***/ ((module) => {

module.exports = require("@supabase/supabase-js");

/***/ }),

/***/ "next/dist/compiled/next-server/pages-api.runtime.dev.js":
/*!**************************************************************************!*\
  !*** external "next/dist/compiled/next-server/pages-api.runtime.dev.js" ***!
  \**************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/pages-api.runtime.dev.js");

/***/ }),

/***/ "crypto":
/*!*************************!*\
  !*** external "crypto" ***!
  \*************************/
/***/ ((module) => {

module.exports = require("crypto");

/***/ }),

/***/ "(api)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fusage-stats&preferredRegion=&absolutePagePath=.%2Fpages%5Capi%5Cusage-stats.ts&middlewareConfigBase64=e30%3D!":
/*!****************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fusage-stats&preferredRegion=&absolutePagePath=.%2Fpages%5Capi%5Cusage-stats.ts&middlewareConfigBase64=e30%3D! ***!
  \****************************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   config: () => (/* binding */ config),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   routeModule: () => (/* binding */ routeModule)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_future_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/future/route-modules/pages-api/module.compiled */ \"(api)/./node_modules/next/dist/server/future/route-modules/pages-api/module.compiled.js\");\n/* harmony import */ var next_dist_server_future_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_future_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/future/route-kind */ \"(api)/./node_modules/next/dist/server/future/route-kind.js\");\n/* harmony import */ var next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/build/templates/helpers */ \"(api)/./node_modules/next/dist/build/templates/helpers.js\");\n/* harmony import */ var _pages_api_usage_stats_ts__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./pages\\api\\usage-stats.ts */ \"(api)/./pages/api/usage-stats.ts\");\n\n\n\n// Import the userland code.\n\n// Re-export the handler (should be the default export).\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__.hoist)(_pages_api_usage_stats_ts__WEBPACK_IMPORTED_MODULE_3__, \"default\"));\n// Re-export config.\nconst config = (0,next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__.hoist)(_pages_api_usage_stats_ts__WEBPACK_IMPORTED_MODULE_3__, \"config\");\n// Create and export the route module that will be consumed.\nconst routeModule = new next_dist_server_future_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0__.PagesAPIRouteModule({\n    definition: {\n        kind: next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.PAGES_API,\n        page: \"/api/usage-stats\",\n        pathname: \"/api/usage-stats\",\n        // The following aren't used in production.\n        bundlePath: \"\",\n        filename: \"\"\n    },\n    userland: _pages_api_usage_stats_ts__WEBPACK_IMPORTED_MODULE_3__\n});\n\n//# sourceMappingURL=pages-api.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaSkvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2J1aWxkL3dlYnBhY2svbG9hZGVycy9uZXh0LXJvdXRlLWxvYWRlci9pbmRleC5qcz9raW5kPVBBR0VTX0FQSSZwYWdlPSUyRmFwaSUyRnVzYWdlLXN0YXRzJnByZWZlcnJlZFJlZ2lvbj0mYWJzb2x1dGVQYWdlUGF0aD0uJTJGcGFnZXMlNUNhcGklNUN1c2FnZS1zdGF0cy50cyZtaWRkbGV3YXJlQ29uZmlnQmFzZTY0PWUzMCUzRCEiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFBc0c7QUFDdkM7QUFDTDtBQUMxRDtBQUN5RDtBQUN6RDtBQUNBLGlFQUFlLHdFQUFLLENBQUMsc0RBQVEsWUFBWSxFQUFDO0FBQzFDO0FBQ08sZUFBZSx3RUFBSyxDQUFDLHNEQUFRO0FBQ3BDO0FBQ08sd0JBQXdCLGdIQUFtQjtBQUNsRDtBQUNBLGNBQWMseUVBQVM7QUFDdkI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTCxZQUFZO0FBQ1osQ0FBQzs7QUFFRCIsInNvdXJjZXMiOlsid2VicGFjazovL2xhYnVidXMtY2hlY2tlci8/MmI2MSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBQYWdlc0FQSVJvdXRlTW9kdWxlIH0gZnJvbSBcIm5leHQvZGlzdC9zZXJ2ZXIvZnV0dXJlL3JvdXRlLW1vZHVsZXMvcGFnZXMtYXBpL21vZHVsZS5jb21waWxlZFwiO1xuaW1wb3J0IHsgUm91dGVLaW5kIH0gZnJvbSBcIm5leHQvZGlzdC9zZXJ2ZXIvZnV0dXJlL3JvdXRlLWtpbmRcIjtcbmltcG9ydCB7IGhvaXN0IH0gZnJvbSBcIm5leHQvZGlzdC9idWlsZC90ZW1wbGF0ZXMvaGVscGVyc1wiO1xuLy8gSW1wb3J0IHRoZSB1c2VybGFuZCBjb2RlLlxuaW1wb3J0ICogYXMgdXNlcmxhbmQgZnJvbSBcIi4vcGFnZXNcXFxcYXBpXFxcXHVzYWdlLXN0YXRzLnRzXCI7XG4vLyBSZS1leHBvcnQgdGhlIGhhbmRsZXIgKHNob3VsZCBiZSB0aGUgZGVmYXVsdCBleHBvcnQpLlxuZXhwb3J0IGRlZmF1bHQgaG9pc3QodXNlcmxhbmQsIFwiZGVmYXVsdFwiKTtcbi8vIFJlLWV4cG9ydCBjb25maWcuXG5leHBvcnQgY29uc3QgY29uZmlnID0gaG9pc3QodXNlcmxhbmQsIFwiY29uZmlnXCIpO1xuLy8gQ3JlYXRlIGFuZCBleHBvcnQgdGhlIHJvdXRlIG1vZHVsZSB0aGF0IHdpbGwgYmUgY29uc3VtZWQuXG5leHBvcnQgY29uc3Qgcm91dGVNb2R1bGUgPSBuZXcgUGFnZXNBUElSb3V0ZU1vZHVsZSh7XG4gICAgZGVmaW5pdGlvbjoge1xuICAgICAgICBraW5kOiBSb3V0ZUtpbmQuUEFHRVNfQVBJLFxuICAgICAgICBwYWdlOiBcIi9hcGkvdXNhZ2Utc3RhdHNcIixcbiAgICAgICAgcGF0aG5hbWU6IFwiL2FwaS91c2FnZS1zdGF0c1wiLFxuICAgICAgICAvLyBUaGUgZm9sbG93aW5nIGFyZW4ndCB1c2VkIGluIHByb2R1Y3Rpb24uXG4gICAgICAgIGJ1bmRsZVBhdGg6IFwiXCIsXG4gICAgICAgIGZpbGVuYW1lOiBcIlwiXG4gICAgfSxcbiAgICB1c2VybGFuZFxufSk7XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXBhZ2VzLWFwaS5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(api)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fusage-stats&preferredRegion=&absolutePagePath=.%2Fpages%5Capi%5Cusage-stats.ts&middlewareConfigBase64=e30%3D!\n");

/***/ }),

/***/ "(api)/./lib/db.ts":
/*!*******************!*\
  !*** ./lib/db.ts ***!
  \*******************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createClient: () => (/* binding */ createClient),\n/* harmony export */   supabase: () => (/* binding */ supabase)\n/* harmony export */ });\n/* harmony import */ var _supabase_supabase_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @supabase/supabase-js */ \"@supabase/supabase-js\");\n/* harmony import */ var _supabase_supabase_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_supabase_supabase_js__WEBPACK_IMPORTED_MODULE_0__);\n\nconst supabase = (0,_supabase_supabase_js__WEBPACK_IMPORTED_MODULE_0__.createClient)(\"https://cfyohvsacffjgzpjrywn.supabase.co\" || 0, \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImNmeW9odnNhY2Zmamd6cGpyeXduIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTQ4NjEzNDMsImV4cCI6MjA3MDQzNzM0M30.RdZJp0Z041_fEyFN10c_dkAJ-nVaSmttovBhj36VrnA\" || 0);\n// Export createClient for the enhanced usage system\nconst createClient = ()=>(0,_supabase_supabase_js__WEBPACK_IMPORTED_MODULE_0__.createClient)(\"https://cfyohvsacffjgzpjrywn.supabase.co\" || 0, process.env.SUPABASE_SERVICE_ROLE_KEY || \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImNmeW9odnNhY2Zmamd6cGpyeXduIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTQ4NjEzNDMsImV4cCI6MjA3MDQzNzM0M30.RdZJp0Z041_fEyFN10c_dkAJ-nVaSmttovBhj36VrnA\" || 0);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaSkvLi9saWIvZGIudHMiLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUE2RTtBQUV0RSxNQUFNRSxXQUFXRCxtRUFBb0JBLENBQzNDRSwwQ0FBb0MsSUFBSSxDQUFFLEVBQzFDQSxrTkFBeUMsSUFBSSxDQUFFLEVBQzlDO0FBRUYsb0RBQW9EO0FBQzdDLE1BQU1ILGVBQWUsSUFBTUMsbUVBQW9CQSxDQUNyREUsMENBQW9DLElBQUksQ0FBRSxFQUMxQ0EsUUFBUUMsR0FBRyxDQUFDRyx5QkFBeUIsSUFBSUosa05BQXlDLElBQUksQ0FBRSxFQUN2RiIsInNvdXJjZXMiOlsid2VicGFjazovL2xhYnVidXMtY2hlY2tlci8uL2xpYi9kYi50cz8xZGYwIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGNyZWF0ZUNsaWVudCBhcyBjcmVhdGVTdXBhYmFzZUNsaWVudCB9IGZyb20gXCJAc3VwYWJhc2Uvc3VwYWJhc2UtanNcIjtcblxuZXhwb3J0IGNvbnN0IHN1cGFiYXNlID0gY3JlYXRlU3VwYWJhc2VDbGllbnQoXG5cdHByb2Nlc3MuZW52Lk5FWFRfUFVCTElDX1NVUEFCQVNFX1VSTCB8fCBcIlwiLFxuXHRwcm9jZXNzLmVudi5ORVhUX1BVQkxJQ19TVVBBQkFTRV9BTk9OX0tFWSB8fCBcIlwiXG4pO1xuXG4vLyBFeHBvcnQgY3JlYXRlQ2xpZW50IGZvciB0aGUgZW5oYW5jZWQgdXNhZ2Ugc3lzdGVtXG5leHBvcnQgY29uc3QgY3JlYXRlQ2xpZW50ID0gKCkgPT4gY3JlYXRlU3VwYWJhc2VDbGllbnQoXG5cdHByb2Nlc3MuZW52Lk5FWFRfUFVCTElDX1NVUEFCQVNFX1VSTCB8fCBcIlwiLFxuXHRwcm9jZXNzLmVudi5TVVBBQkFTRV9TRVJWSUNFX1JPTEVfS0VZIHx8IHByb2Nlc3MuZW52Lk5FWFRfUFVCTElDX1NVUEFCQVNFX0FOT05fS0VZIHx8IFwiXCJcbik7XG5cbmV4cG9ydCB0eXBlIEhpc3RvcnlJdGVtID0ge1xuXHRpZDogc3RyaW5nO1xuXHR1c2VyX2lkPzogc3RyaW5nIHwgbnVsbDtcblx0aW1hZ2VfdXJsOiBzdHJpbmc7XG5cdGxhYmVsOiBcIkxpa2VseSBBdXRoZW50aWNcIiB8IFwiU3VzcGljaW91c1wiIHwgXCJGYWtlXCI7XG5cdHJlYXNvbjogc3RyaW5nO1xuXHRjb25maWRlbmNlOiBudW1iZXI7XG5cdGNyZWF0ZWRfYXQ6IHN0cmluZztcbn07XG4iXSwibmFtZXMiOlsiY3JlYXRlQ2xpZW50IiwiY3JlYXRlU3VwYWJhc2VDbGllbnQiLCJzdXBhYmFzZSIsInByb2Nlc3MiLCJlbnYiLCJORVhUX1BVQkxJQ19TVVBBQkFTRV9VUkwiLCJORVhUX1BVQkxJQ19TVVBBQkFTRV9BTk9OX0tFWSIsIlNVUEFCQVNFX1NFUlZJQ0VfUk9MRV9LRVkiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(api)/./lib/db.ts\n");

/***/ }),

/***/ "(api)/./lib/usage-enhanced.ts":
/*!*******************************!*\
  !*** ./lib/usage-enhanced.ts ***!
  \*******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   addPaidChecks: () => (/* binding */ addPaidChecks),\n/* harmony export */   checkRateLimit: () => (/* binding */ checkRateLimit),\n/* harmony export */   deductPaidCheck: () => (/* binding */ deductPaidCheck),\n/* harmony export */   detectAbuse: () => (/* binding */ detectAbuse),\n/* harmony export */   getClientFingerprint: () => (/* binding */ getClientFingerprint),\n/* harmony export */   getUsageStats: () => (/* binding */ getUsageStats),\n/* harmony export */   hashIP: () => (/* binding */ hashIP),\n/* harmony export */   hashUserAgent: () => (/* binding */ hashUserAgent),\n/* harmony export */   logUsage: () => (/* binding */ logUsage)\n/* harmony export */ });\n/* harmony import */ var crypto__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! crypto */ \"crypto\");\n/* harmony import */ var crypto__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(crypto__WEBPACK_IMPORTED_MODULE_0__);\n\n// Mock database for testing\nconst mockSupabase = {\n    from: (table)=>({\n            select: (columns = \"*\")=>({\n                    eq: (column, value)=>({\n                            gte: (column, value)=>({\n                                    single: ()=>Promise.resolve({\n                                            data: null,\n                                            error: null\n                                        }),\n                                    then: (callback)=>Promise.resolve(callback({\n                                            data: [],\n                                            error: null\n                                        }))\n                                }),\n                            then: (callback)=>Promise.resolve(callback({\n                                    data: [],\n                                    error: null\n                                }))\n                        }),\n                    gte: (column, value)=>({\n                            then: (callback)=>Promise.resolve(callback({\n                                    data: [],\n                                    error: null\n                                }))\n                        }),\n                    then: (callback)=>Promise.resolve(callback({\n                            data: [],\n                            error: null\n                        }))\n                }),\n            insert: (data)=>Promise.resolve({\n                    data: null,\n                    error: null\n                }),\n            update: (data)=>({\n                    eq: (column, value)=>({\n                            eq: (column, value)=>({\n                                    select: (columns)=>({\n                                            single: ()=>Promise.resolve({\n                                                    data: {\n                                                        remaining_checks: 5\n                                                    },\n                                                    error: null\n                                                })\n                                        })\n                                }),\n                            select: (columns)=>({\n                                    single: ()=>Promise.resolve({\n                                            data: {\n                                                remaining_checks: 5\n                                            },\n                                            error: null\n                                        })\n                                })\n                        }),\n                    select: (columns)=>({\n                            single: ()=>Promise.resolve({\n                                    data: {\n                                        remaining_checks: 5\n                                    },\n                                    error: null\n                                })\n                        })\n                }),\n            raw: (query)=>query\n        })\n};\n// Use mock database in test environment, real database otherwise\nfunction createClient() {\n    if (false) {}\n    // Import real database client\n    const { createClient: createRealClient } = __webpack_require__(/*! ./db */ \"(api)/./lib/db.ts\");\n    const client = createRealClient();\n    console.log(\"\\uD83D\\uDD27 Usage enhanced client created\");\n    return client;\n}\n// Privacy-compliant hashing for GDPR/CCPA compliance\n// These functions create one-way hashes that cannot be reversed to original IP/UA\nfunction hashIP(ip) {\n    // Hash IP with salt for privacy - cannot be reversed to original IP\n    const salt = process.env.IP_HASH_SALT || \"default-salt-change-in-production\";\n    return crypto__WEBPACK_IMPORTED_MODULE_0___default().createHash(\"sha256\").update(ip + salt).digest(\"hex\").substring(0, 16);\n}\nfunction hashUserAgent(userAgent) {\n    // Hash user agent with salt for privacy - cannot be reversed to original UA\n    const salt = process.env.UA_HASH_SALT || \"default-salt-change-in-production\";\n    return crypto__WEBPACK_IMPORTED_MODULE_0___default().createHash(\"sha256\").update(userAgent + salt).digest(\"hex\").substring(0, 16);\n}\nfunction getClientFingerprint(req) {\n    // Get real IP (considering proxies)\n    const ip = req.headers[\"x-forwarded-for\"]?.split(\",\")[0] || req.headers[\"x-real-ip\"] || req.connection?.remoteAddress || req.socket?.remoteAddress || \"127.0.0.1\";\n    const userAgent = req.headers[\"user-agent\"] || \"unknown\";\n    return {\n        ipHash: hashIP(ip),\n        uaHash: hashUserAgent(userAgent)\n    };\n}\nasync function getUsageStats(userId, ipHash, uaHash) {\n    const supabase = createClient();\n    const now = new Date();\n    // Calculate the start of the current week (Monday)\n    const weekStart = new Date(now);\n    const dayOfWeek = now.getDay();\n    const daysToMonday = dayOfWeek === 0 ? 6 : dayOfWeek - 1; // Sunday = 0, so 6 days back to Monday\n    weekStart.setDate(now.getDate() - daysToMonday);\n    weekStart.setHours(0, 0, 0, 0);\n    console.log(\"Getting usage stats for:\", {\n        userId,\n        ipHash,\n        uaHash,\n        weekStart: weekStart.toISOString()\n    });\n    console.log(\"UserId type:\", typeof userId, \"Value:\", userId);\n    // Get free checks used in the current week\n    let freeUsageQuery = supabase.from(\"usage_logs\").select(\"*\").gte(\"created_at\", weekStart.toISOString());\n    if (userId) {\n        // For authenticated users, count only free checks for this user\n        freeUsageQuery = freeUsageQuery.eq(\"user_id\", userId).eq(\"check_type\", \"free\");\n    } else {\n        // For anonymous users, count all checks (they're all free)\n        freeUsageQuery = freeUsageQuery.is(\"user_id\", null);\n    }\n    const { data: freeUsage, error: freeError } = await freeUsageQuery;\n    if (freeError) {\n        console.error(\"Error fetching free usage:\", freeError);\n    }\n    console.log(\"Free usage data:\", freeUsage);\n    const freeChecksUsed = freeUsage?.length || 0;\n    // Get paid checks remaining for user\n    let paidChecksRemaining = 0;\n    if (userId) {\n        console.log(\"\\uD83D\\uDD0D Fetching paid checks for user:\", userId);\n        const { data: user, error: userError } = await supabase.from(\"profiles\").select(\"remaining_checks\").eq(\"id\", userId).single();\n        if (userError) {\n            console.error(\"Error fetching user profile for paid checks:\", userError);\n            // If profile doesn't exist, create it\n            if (userError.code === \"PGRST116\") {\n                console.log(\"\\uD83D\\uDD27 User profile not found, creating one...\");\n                const { error: createError } = await supabase.from(\"profiles\").insert({\n                    id: userId,\n                    remaining_checks: 0\n                });\n                if (createError) {\n                    console.error(\"Error creating user profile:\", createError);\n                } else {\n                    console.log(\"\\uD83D\\uDD27 User profile created successfully\");\n                }\n            }\n        } else {\n            console.log(\"\\uD83D\\uDD0D User profile data:\", user);\n        }\n        paidChecksRemaining = user?.remaining_checks || 0;\n        console.log(\"\\uD83D\\uDD0D Paid checks remaining:\", paidChecksRemaining);\n    }\n    // Get total checks this week (for abuse detection)\n    const { data: totalUsage } = await supabase.from(\"usage_logs\").select(\"*\").gte(\"created_at\", weekStart.toISOString());\n    const totalChecksThisWeek = totalUsage?.length || 0;\n    // Check if user is limited (3 free checks per week)\n    const isLimited = freeChecksUsed >= 3;\n    console.log(\"isLimited calculation:\", {\n        freeChecksUsed,\n        isLimited\n    });\n    const result = {\n        freeChecksUsed,\n        paidChecksRemaining,\n        totalChecksThisWeek,\n        isLimited\n    };\n    console.log(\"Usage stats result:\", result);\n    return result;\n}\nasync function logUsage(userId, ipHash, uaHash, checkType) {\n    const supabase = createClient();\n    const { data, error } = await supabase.from(\"usage_logs\").insert({\n        user_id: userId || null,\n        ip_hash: ipHash,\n        user_agent_hash: uaHash,\n        check_type: checkType\n    });\n    if (error) {\n        console.error(\"Failed to log usage:\", error);\n        throw new Error(`Failed to log usage: ${error.message}`);\n    }\n    console.log(\"Successfully logged usage:\", {\n        userId,\n        ipHash,\n        uaHash,\n        checkType\n    });\n}\nasync function checkRateLimit(identifier, action = \"check\") {\n    const supabase = createClient();\n    const now = new Date();\n    const windowStart = new Date(now.getTime() - 60 * 60 * 1000); // 1 hour window\n    // Check current rate limit\n    const { data: existing } = await supabase.from(\"rate_limits\").select(\"*\").eq(\"identifier\", identifier).eq(\"action\", action).gte(\"window_start\", windowStart.toISOString()).single();\n    if (existing) {\n        // If more than 100 checks per hour, block (increased for testing)\n        if (existing.count >= 100) {\n            return false;\n        }\n        // Increment count\n        await supabase.from(\"rate_limits\").update({\n            count: existing.count + 1\n        }).eq(\"id\", existing.id);\n    } else {\n        // Create new rate limit record\n        await supabase.from(\"rate_limits\").insert({\n            identifier,\n            action,\n            count: 1,\n            window_start: now.toISOString()\n        });\n    }\n    return true;\n}\nasync function detectAbuse(ipHash, uaHash) {\n    const supabase = createClient();\n    const now = new Date();\n    // Calculate the start of the current week (Monday)\n    const weekStart = new Date(now);\n    const dayOfWeek = now.getDay();\n    const daysToMonday = dayOfWeek === 0 ? 6 : dayOfWeek - 1; // Sunday = 0, so 6 days back to Monday\n    weekStart.setDate(now.getDate() - daysToMonday);\n    weekStart.setHours(0, 0, 0, 0);\n    // Check for suspicious activity patterns\n    const { data: ipUsage } = await supabase.from(\"usage_logs\").select(\"*\").eq(\"ip_hash\", ipHash).gte(\"created_at\", weekStart.toISOString());\n    const { data: uaUsage } = await supabase.from(\"usage_logs\").select(\"*\").eq(\"user_agent_hash\", uaHash).gte(\"created_at\", weekStart.toISOString());\n    // Flag as abuse if:\n    // - More than 50 checks from same IP this week (increased from daily limit)\n    // - More than 40 checks from same user agent this week (increased from daily limit)\n    // - More than 10 different user agents from same IP this week (increased from daily limit)\n    const ipCount = ipUsage?.length || 0;\n    const uaCount = uaUsage?.length || 0;\n    // Get unique user agents for this IP\n    const { data: uniqueUAs } = await supabase.from(\"usage_logs\").select(\"user_agent_hash\").eq(\"ip_hash\", ipHash).gte(\"created_at\", weekStart.toISOString());\n    const uniqueUACount = new Set(uniqueUAs?.map((u)=>u.user_agent_hash) || []).size;\n    return ipCount > 50 || uaCount > 40 || uniqueUACount > 10;\n}\nasync function deductPaidCheck(userId) {\n    const supabase = createClient();\n    console.log(\"\\uD83D\\uDD27 Deducting paid check for user:\", userId);\n    // First get current remaining_checks\n    const { data: currentProfile, error: fetchError } = await supabase.from(\"profiles\").select(\"remaining_checks\").eq(\"id\", userId).single();\n    if (fetchError) {\n        console.error(\"Error fetching current profile for deduction:\", fetchError);\n        return false;\n    }\n    const currentChecks = currentProfile?.remaining_checks || 0;\n    console.log(\"\\uD83D\\uDD27 Current checks before deduction:\", currentChecks);\n    if (currentChecks <= 0) {\n        console.log(\"\\uD83D\\uDD27 No checks remaining, cannot deduct\");\n        return false;\n    }\n    const newChecks = currentChecks - 1;\n    console.log(\"\\uD83D\\uDD27 Deducting check, new count will be:\", newChecks);\n    // Update with new value\n    const { data, error } = await supabase.from(\"profiles\").update({\n        remaining_checks: newChecks\n    }).eq(\"id\", userId).select(\"remaining_checks\").single();\n    if (error) {\n        console.error(\"Error deducting paid check:\", error);\n        return false;\n    }\n    console.log(\"\\uD83D\\uDD27 Successfully deducted check, new count:\", data?.remaining_checks);\n    return true;\n}\nasync function addPaidChecks(userId, checksToAdd) {\n    const supabase = createClient();\n    // First get current remaining_checks\n    const { data: currentProfile, error: fetchError } = await supabase.from(\"profiles\").select(\"remaining_checks\").eq(\"id\", userId).single();\n    if (fetchError) {\n        console.error(\"Error fetching current profile for addition:\", fetchError);\n        throw new Error(\"Failed to fetch current profile\");\n    }\n    const currentChecks = currentProfile?.remaining_checks || 0;\n    const newChecks = currentChecks + checksToAdd;\n    // Update with new value\n    const { error } = await supabase.from(\"profiles\").update({\n        remaining_checks: newChecks\n    }).eq(\"id\", userId);\n    if (error) {\n        console.error(\"Error adding paid checks:\", error);\n        throw new Error(\"Failed to add paid checks\");\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api)/./lib/usage-enhanced.ts\n");

/***/ }),

/***/ "(api)/./pages/api/usage-stats.ts":
/*!**********************************!*\
  !*** ./pages/api/usage-stats.ts ***!
  \**********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ handler)\n/* harmony export */ });\n/* harmony import */ var _lib_usage_enhanced__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @/lib/usage-enhanced */ \"(api)/./lib/usage-enhanced.ts\");\n\n\nasync function handler(req, res) {\n    if (req.method !== \"POST\") return res.status(405).end(\"Method not allowed\");\n    try {\n        const { userId } = req.body;\n        console.log(\"\\uD83D\\uDCCA Usage stats API called for user:\", userId);\n        // Get client fingerprint for anonymous users\n        const { ipHash, uaHash } = (0,_lib_usage_enhanced__WEBPACK_IMPORTED_MODULE_0__.getClientFingerprint)(req);\n        // Get usage stats for the user (authenticated or anonymous)\n        const usageStats = await (0,_lib_usage_enhanced__WEBPACK_IMPORTED_MODULE_0__.getUsageStats)(userId || null, ipHash, uaHash);\n        console.log(\"\\uD83D\\uDCCA Usage stats API returning:\", usageStats);\n        return res.status(200).json(usageStats);\n    } catch (e) {\n        console.error(\"Usage stats error:\", e);\n        return res.status(500).json({\n            error: e?.message || \"Server error\"\n        });\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaSkvLi9wYWdlcy9hcGkvdXNhZ2Utc3RhdHMudHMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFDcUQ7QUFDTztBQUU3QyxlQUFlRSxRQUFRQyxHQUFtQixFQUFFQyxHQUFvQjtJQUM3RSxJQUFJRCxJQUFJRSxNQUFNLEtBQUssUUFBUSxPQUFPRCxJQUFJRSxNQUFNLENBQUMsS0FBS0MsR0FBRyxDQUFDO0lBRXRELElBQUk7UUFDRixNQUFNLEVBQUVDLE1BQU0sRUFBRSxHQUFHTCxJQUFJTSxJQUFJO1FBRTNCQyxRQUFRQyxHQUFHLENBQUMsaURBQXVDSDtRQUVuRCw2Q0FBNkM7UUFDN0MsTUFBTSxFQUFFSSxNQUFNLEVBQUVDLE1BQU0sRUFBRSxHQUFHWix5RUFBb0JBLENBQUNFO1FBRWhELDREQUE0RDtRQUM1RCxNQUFNVyxhQUFhLE1BQU1kLGtFQUFhQSxDQUFDUSxVQUFVLE1BQU1JLFFBQVFDO1FBRS9ESCxRQUFRQyxHQUFHLENBQUMsMkNBQWlDRztRQUM3QyxPQUFPVixJQUFJRSxNQUFNLENBQUMsS0FBS1MsSUFBSSxDQUFDRDtJQUM5QixFQUFFLE9BQU9FLEdBQVE7UUFDZk4sUUFBUU8sS0FBSyxDQUFDLHNCQUFzQkQ7UUFDcEMsT0FBT1osSUFBSUUsTUFBTSxDQUFDLEtBQUtTLElBQUksQ0FBQztZQUFFRSxPQUFPRCxHQUFHRSxXQUFXO1FBQWU7SUFDcEU7QUFDRiIsInNvdXJjZXMiOlsid2VicGFjazovL2xhYnVidXMtY2hlY2tlci8uL3BhZ2VzL2FwaS91c2FnZS1zdGF0cy50cz80NzliIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB0eXBlIHsgTmV4dEFwaVJlcXVlc3QsIE5leHRBcGlSZXNwb25zZSB9IGZyb20gXCJuZXh0XCI7XHJcbmltcG9ydCB7IGdldFVzYWdlU3RhdHMgfSBmcm9tIFwiQC9saWIvdXNhZ2UtZW5oYW5jZWRcIjtcclxuaW1wb3J0IHsgZ2V0Q2xpZW50RmluZ2VycHJpbnQgfSBmcm9tIFwiQC9saWIvdXNhZ2UtZW5oYW5jZWRcIjtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGFzeW5jIGZ1bmN0aW9uIGhhbmRsZXIocmVxOiBOZXh0QXBpUmVxdWVzdCwgcmVzOiBOZXh0QXBpUmVzcG9uc2UpIHtcclxuICBpZiAocmVxLm1ldGhvZCAhPT0gJ1BPU1QnKSByZXR1cm4gcmVzLnN0YXR1cyg0MDUpLmVuZCgnTWV0aG9kIG5vdCBhbGxvd2VkJyk7XHJcbiAgXHJcbiAgdHJ5IHtcclxuICAgIGNvbnN0IHsgdXNlcklkIH0gPSByZXEuYm9keTtcclxuICAgIFxyXG4gICAgY29uc29sZS5sb2coJ/Cfk4ogVXNhZ2Ugc3RhdHMgQVBJIGNhbGxlZCBmb3IgdXNlcjonLCB1c2VySWQpO1xyXG4gICAgXHJcbiAgICAvLyBHZXQgY2xpZW50IGZpbmdlcnByaW50IGZvciBhbm9ueW1vdXMgdXNlcnNcclxuICAgIGNvbnN0IHsgaXBIYXNoLCB1YUhhc2ggfSA9IGdldENsaWVudEZpbmdlcnByaW50KHJlcSk7XHJcbiAgICBcclxuICAgIC8vIEdldCB1c2FnZSBzdGF0cyBmb3IgdGhlIHVzZXIgKGF1dGhlbnRpY2F0ZWQgb3IgYW5vbnltb3VzKVxyXG4gICAgY29uc3QgdXNhZ2VTdGF0cyA9IGF3YWl0IGdldFVzYWdlU3RhdHModXNlcklkIHx8IG51bGwsIGlwSGFzaCwgdWFIYXNoKTtcclxuICAgIFxyXG4gICAgY29uc29sZS5sb2coJ/Cfk4ogVXNhZ2Ugc3RhdHMgQVBJIHJldHVybmluZzonLCB1c2FnZVN0YXRzKTtcclxuICAgIHJldHVybiByZXMuc3RhdHVzKDIwMCkuanNvbih1c2FnZVN0YXRzKTtcclxuICB9IGNhdGNoIChlOiBhbnkpIHtcclxuICAgIGNvbnNvbGUuZXJyb3IoJ1VzYWdlIHN0YXRzIGVycm9yOicsIGUpO1xyXG4gICAgcmV0dXJuIHJlcy5zdGF0dXMoNTAwKS5qc29uKHsgZXJyb3I6IGU/Lm1lc3NhZ2UgfHwgJ1NlcnZlciBlcnJvcicgfSk7XHJcbiAgfVxyXG59XHJcblxyXG5cclxuIl0sIm5hbWVzIjpbImdldFVzYWdlU3RhdHMiLCJnZXRDbGllbnRGaW5nZXJwcmludCIsImhhbmRsZXIiLCJyZXEiLCJyZXMiLCJtZXRob2QiLCJzdGF0dXMiLCJlbmQiLCJ1c2VySWQiLCJib2R5IiwiY29uc29sZSIsImxvZyIsImlwSGFzaCIsInVhSGFzaCIsInVzYWdlU3RhdHMiLCJqc29uIiwiZSIsImVycm9yIiwibWVzc2FnZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(api)/./pages/api/usage-stats.ts\n");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../webpack-api-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendor-chunks/next"], () => (__webpack_exec__("(api)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fusage-stats&preferredRegion=&absolutePagePath=.%2Fpages%5Capi%5Cusage-stats.ts&middlewareConfigBase64=e30%3D!")));
module.exports = __webpack_exports__;

})();