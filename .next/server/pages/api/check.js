"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "pages/api/check";
exports.ids = ["pages/api/check"];
exports.modules = {

/***/ "@supabase/supabase-js":
/*!****************************************!*\
  !*** external "@supabase/supabase-js" ***!
  \****************************************/
/***/ ((module) => {

module.exports = require("@supabase/supabase-js");

/***/ }),

/***/ "busboy":
/*!*************************!*\
  !*** external "busboy" ***!
  \*************************/
/***/ ((module) => {

module.exports = require("busboy");

/***/ }),

/***/ "next/dist/compiled/next-server/pages-api.runtime.dev.js":
/*!**************************************************************************!*\
  !*** external "next/dist/compiled/next-server/pages-api.runtime.dev.js" ***!
  \**************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/pages-api.runtime.dev.js");

/***/ }),

/***/ "openai":
/*!*************************!*\
  !*** external "openai" ***!
  \*************************/
/***/ ((module) => {

module.exports = import("openai");;

/***/ }),

/***/ "zod":
/*!**********************!*\
  !*** external "zod" ***!
  \**********************/
/***/ ((module) => {

module.exports = import("zod");;

/***/ }),

/***/ "crypto":
/*!*************************!*\
  !*** external "crypto" ***!
  \*************************/
/***/ ((module) => {

module.exports = require("crypto");

/***/ }),

/***/ "(api)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fcheck&preferredRegion=&absolutePagePath=.%2Fpages%5Capi%5Ccheck.ts&middlewareConfigBase64=e30%3D!":
/*!****************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fcheck&preferredRegion=&absolutePagePath=.%2Fpages%5Capi%5Ccheck.ts&middlewareConfigBase64=e30%3D! ***!
  \****************************************************************************************************************************************************************************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   config: () => (/* binding */ config),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   routeModule: () => (/* binding */ routeModule)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_future_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/future/route-modules/pages-api/module.compiled */ \"(api)/./node_modules/next/dist/server/future/route-modules/pages-api/module.compiled.js\");\n/* harmony import */ var next_dist_server_future_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_future_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/future/route-kind */ \"(api)/./node_modules/next/dist/server/future/route-kind.js\");\n/* harmony import */ var next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/build/templates/helpers */ \"(api)/./node_modules/next/dist/build/templates/helpers.js\");\n/* harmony import */ var _pages_api_check_ts__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./pages\\api\\check.ts */ \"(api)/./pages/api/check.ts\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_pages_api_check_ts__WEBPACK_IMPORTED_MODULE_3__]);\n_pages_api_check_ts__WEBPACK_IMPORTED_MODULE_3__ = (__webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__)[0];\n\n\n\n// Import the userland code.\n\n// Re-export the handler (should be the default export).\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__.hoist)(_pages_api_check_ts__WEBPACK_IMPORTED_MODULE_3__, \"default\"));\n// Re-export config.\nconst config = (0,next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__.hoist)(_pages_api_check_ts__WEBPACK_IMPORTED_MODULE_3__, \"config\");\n// Create and export the route module that will be consumed.\nconst routeModule = new next_dist_server_future_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0__.PagesAPIRouteModule({\n    definition: {\n        kind: next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.PAGES_API,\n        page: \"/api/check\",\n        pathname: \"/api/check\",\n        // The following aren't used in production.\n        bundlePath: \"\",\n        filename: \"\"\n    },\n    userland: _pages_api_check_ts__WEBPACK_IMPORTED_MODULE_3__\n});\n\n//# sourceMappingURL=pages-api.js.map\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaSkvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2J1aWxkL3dlYnBhY2svbG9hZGVycy9uZXh0LXJvdXRlLWxvYWRlci9pbmRleC5qcz9raW5kPVBBR0VTX0FQSSZwYWdlPSUyRmFwaSUyRmNoZWNrJnByZWZlcnJlZFJlZ2lvbj0mYWJzb2x1dGVQYWdlUGF0aD0uJTJGcGFnZXMlNUNhcGklNUNjaGVjay50cyZtaWRkbGV3YXJlQ29uZmlnQmFzZTY0PWUzMCUzRCEiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7QUFBc0c7QUFDdkM7QUFDTDtBQUMxRDtBQUNtRDtBQUNuRDtBQUNBLGlFQUFlLHdFQUFLLENBQUMsZ0RBQVEsWUFBWSxFQUFDO0FBQzFDO0FBQ08sZUFBZSx3RUFBSyxDQUFDLGdEQUFRO0FBQ3BDO0FBQ08sd0JBQXdCLGdIQUFtQjtBQUNsRDtBQUNBLGNBQWMseUVBQVM7QUFDdkI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTCxZQUFZO0FBQ1osQ0FBQzs7QUFFRCxxQyIsInNvdXJjZXMiOlsid2VicGFjazovL2xhYnVidXMtY2hlY2tlci8/OGQzMiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBQYWdlc0FQSVJvdXRlTW9kdWxlIH0gZnJvbSBcIm5leHQvZGlzdC9zZXJ2ZXIvZnV0dXJlL3JvdXRlLW1vZHVsZXMvcGFnZXMtYXBpL21vZHVsZS5jb21waWxlZFwiO1xuaW1wb3J0IHsgUm91dGVLaW5kIH0gZnJvbSBcIm5leHQvZGlzdC9zZXJ2ZXIvZnV0dXJlL3JvdXRlLWtpbmRcIjtcbmltcG9ydCB7IGhvaXN0IH0gZnJvbSBcIm5leHQvZGlzdC9idWlsZC90ZW1wbGF0ZXMvaGVscGVyc1wiO1xuLy8gSW1wb3J0IHRoZSB1c2VybGFuZCBjb2RlLlxuaW1wb3J0ICogYXMgdXNlcmxhbmQgZnJvbSBcIi4vcGFnZXNcXFxcYXBpXFxcXGNoZWNrLnRzXCI7XG4vLyBSZS1leHBvcnQgdGhlIGhhbmRsZXIgKHNob3VsZCBiZSB0aGUgZGVmYXVsdCBleHBvcnQpLlxuZXhwb3J0IGRlZmF1bHQgaG9pc3QodXNlcmxhbmQsIFwiZGVmYXVsdFwiKTtcbi8vIFJlLWV4cG9ydCBjb25maWcuXG5leHBvcnQgY29uc3QgY29uZmlnID0gaG9pc3QodXNlcmxhbmQsIFwiY29uZmlnXCIpO1xuLy8gQ3JlYXRlIGFuZCBleHBvcnQgdGhlIHJvdXRlIG1vZHVsZSB0aGF0IHdpbGwgYmUgY29uc3VtZWQuXG5leHBvcnQgY29uc3Qgcm91dGVNb2R1bGUgPSBuZXcgUGFnZXNBUElSb3V0ZU1vZHVsZSh7XG4gICAgZGVmaW5pdGlvbjoge1xuICAgICAgICBraW5kOiBSb3V0ZUtpbmQuUEFHRVNfQVBJLFxuICAgICAgICBwYWdlOiBcIi9hcGkvY2hlY2tcIixcbiAgICAgICAgcGF0aG5hbWU6IFwiL2FwaS9jaGVja1wiLFxuICAgICAgICAvLyBUaGUgZm9sbG93aW5nIGFyZW4ndCB1c2VkIGluIHByb2R1Y3Rpb24uXG4gICAgICAgIGJ1bmRsZVBhdGg6IFwiXCIsXG4gICAgICAgIGZpbGVuYW1lOiBcIlwiXG4gICAgfSxcbiAgICB1c2VybGFuZFxufSk7XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXBhZ2VzLWFwaS5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(api)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fcheck&preferredRegion=&absolutePagePath=.%2Fpages%5Capi%5Ccheck.ts&middlewareConfigBase64=e30%3D!\n");

/***/ }),

/***/ "(api)/./lib/classifier.ts":
/*!***************************!*\
  !*** ./lib/classifier.ts ***!
  \***************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   callImageClassifier: () => (/* binding */ callImageClassifier)\n/* harmony export */ });\nconst KNOWN_BRANDS = [\n    \"LabCo\",\n    \"LabuPrime\",\n    \"VeritasLab\"\n];\nasync function heuristicMock(imageUrl, meta) {\n    const lower = imageUrl.toLowerCase();\n    if (lower.includes(\"fake\")) {\n        return {\n            label: \"Fake\",\n            reason: \"Filename hints fake; visual artifacts likely.\",\n            confidence: 0.92\n        };\n    }\n    if (meta?.brand && KNOWN_BRANDS.includes(meta.brand)) {\n        return {\n            label: \"Likely Authentic\",\n            reason: `Known brand match (${meta.brand}). No obvious anomalies.`,\n            confidence: 0.78\n        };\n    }\n    const hash = Array.from(lower).reduce((a, c)=>a + c.charCodeAt(0), 0);\n    const r = hash % 100 / 100;\n    if (r < 0.33) return {\n        label: \"Likely Authentic\",\n        reason: \"Consistent texture and logo placement.\",\n        confidence: 0.71\n    };\n    if (r < 0.66) return {\n        label: \"Suspicious\",\n        reason: \"Inconsistent stitching and color cast.\",\n        confidence: 0.64\n    };\n    return {\n        label: \"Fake\",\n        reason: \"Logo mismatch and seam artifacts detected.\",\n        confidence: 0.83\n    };\n}\nconst LABUBU_SYSTEM_PROMPT = [\n    \"You are an expert in authenticating Pop Mart’s Labubu figures.\",\n    \"Your job is to analyze only the provided image(s) of a Labubu and determine whether it is Likely Authentic, Suspicious, or Likely Fake.\",\n    \"What to look for (from image only):\",\n    \"Teeth: exactly nine pointed teeth, evenly spaced; paint cleanly separated from the mouth’s blue line; flag sloppy/merged teeth or wrong count.\",\n    \"Face & Eyes: pale peach (not overly orange/yellow/pink); smooth matte with subtle blush; eyes glossy/glass-like with natural reflections; flag dull/flat eyes, sloppy paint, or unnatural protrusion.\",\n    \"Ears & Hairline: ears close together and slightly inward; hairline at a natural position; fakes often show ears too upright/far apart or hairline too high.\",\n    \"Fur & Stitching (plush): fur should look soft/high-quality; stitching clean and blending with vinyl face; flag coarse fur, frayed threads, uneven seams.\",\n    \"Body Shape & Proportions: look for proportional body without warped faces/lopsided heads; flag misshapen or incorrect proportions.\",\n    \"Foot Details: left foot with Pop Mart logo; right foot (2024+) may have a UV stamp—if not visible, do not penalize; only note absence.\",\n    \"Paint & Overall Quality: crisp paint lines, no chipping/overspray; flag sloppy work or mismatched colors.\",\n    \"Packaging (if visible): clean print, correct logos, consistent palette; matte box finish where appropriate; tags/cards look professionally printed and match known designs.\",\n    'Output format (STRICT JSON only): {\"label\":\"Likely Authentic|Suspicious|Fake\",\"reason\":\"short explanation citing observed features\",\"confidence\":0..1}.',\n    \"If the image is insufficient for confidence, choose 'Suspicious' and state what is unclear/missing. Use factual, collector‑friendly language and probability terms (likely authentic/fake).\"\n].join(\" \");\n// TODO: replace or enhance this with your preferred model provider\nasync function callImageClassifier(imageUrl, meta) {\n    const apiKey = process.env.OPENAI_API_KEY;\n    if (!apiKey) {\n        console.log(`[classifier] OPENAI_API_KEY missing; using heuristic fallback`);\n        return heuristicMock(imageUrl, meta);\n    }\n    try {\n        const OpenAI = (await Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! openai */ \"openai\"))).default;\n        const client = new OpenAI({\n            apiKey\n        });\n        const system = LABUBU_SYSTEM_PROMPT;\n        const userParts = [];\n        if (meta?.analysisPrompt) {\n            userParts.push({\n                type: \"text\",\n                text: `Inspection prompt: ${meta.analysisPrompt}`\n            });\n        }\n        if (meta) {\n            const { analysisPrompt, ...rest } = meta;\n            if (Object.keys(rest).length) {\n                userParts.push({\n                    type: \"text\",\n                    text: `Metadata: ${JSON.stringify(rest)}`\n                });\n            }\n        }\n        userParts.push({\n            type: \"image_url\",\n            image_url: {\n                url: imageUrl\n            }\n        });\n        const response = await client.chat.completions.create({\n            model: process.env.OPENAI_VISION_MODEL || \"gpt-4o-mini\",\n            messages: [\n                {\n                    role: \"system\",\n                    content: system\n                },\n                {\n                    role: \"user\",\n                    content: userParts\n                }\n            ],\n            temperature: 0.2,\n            response_format: {\n                type: \"json_object\"\n            }\n        });\n        console.log(`[classifier] OpenAI call succeeded (model=${process.env.OPENAI_VISION_MODEL || \"gpt-4o-mini\"})`);\n        const text = response.choices?.[0]?.message?.content || \"\";\n        try {\n            const parsed = JSON.parse(text);\n            const label = parsed.label;\n            const reason = String(parsed.reason || \"\");\n            const confidence = Math.max(0, Math.min(1, Number(parsed.confidence ?? 0.7)));\n            if (label === \"Likely Authentic\" || label === \"Suspicious\" || label === \"Fake\") {\n                return {\n                    label,\n                    reason,\n                    confidence\n                };\n            }\n        } catch  {}\n        const lowered = text.toLowerCase();\n        if (lowered.includes(\"fake\")) return {\n            label: \"Fake\",\n            reason: text.slice(0, 200),\n            confidence: 0.8\n        };\n        if (lowered.includes(\"authentic\")) return {\n            label: \"Likely Authentic\",\n            reason: text.slice(0, 200),\n            confidence: 0.7\n        };\n        return {\n            label: \"Suspicious\",\n            reason: text.slice(0, 200) || \"Ambiguous assessment.\",\n            confidence: 0.6\n        };\n    } catch (err) {\n        console.log(`[classifier] OpenAI call failed; using heuristic fallback`, err instanceof Error ? err.message : err);\n        return heuristicMock(imageUrl, meta);\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api)/./lib/classifier.ts\n");

/***/ }),

/***/ "(api)/./lib/db.ts":
/*!*******************!*\
  !*** ./lib/db.ts ***!
  \*******************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createClient: () => (/* binding */ createClient),\n/* harmony export */   supabase: () => (/* binding */ supabase)\n/* harmony export */ });\n/* harmony import */ var _supabase_supabase_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @supabase/supabase-js */ \"@supabase/supabase-js\");\n/* harmony import */ var _supabase_supabase_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_supabase_supabase_js__WEBPACK_IMPORTED_MODULE_0__);\n\nconst supabase = (0,_supabase_supabase_js__WEBPACK_IMPORTED_MODULE_0__.createClient)(\"https://cfyohvsacffjgzpjrywn.supabase.co\" || 0, \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImNmeW9odnNhY2Zmamd6cGpyeXduIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTQ4NjEzNDMsImV4cCI6MjA3MDQzNzM0M30.RdZJp0Z041_fEyFN10c_dkAJ-nVaSmttovBhj36VrnA\" || 0);\n// Export createClient for the enhanced usage system\nconst createClient = ()=>(0,_supabase_supabase_js__WEBPACK_IMPORTED_MODULE_0__.createClient)(\"https://cfyohvsacffjgzpjrywn.supabase.co\" || 0, process.env.SUPABASE_SERVICE_ROLE_KEY || \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImNmeW9odnNhY2Zmamd6cGpyeXduIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTQ4NjEzNDMsImV4cCI6MjA3MDQzNzM0M30.RdZJp0Z041_fEyFN10c_dkAJ-nVaSmttovBhj36VrnA\" || 0);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaSkvLi9saWIvZGIudHMiLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUE2RTtBQUV0RSxNQUFNRSxXQUFXRCxtRUFBb0JBLENBQzNDRSwwQ0FBb0MsSUFBSSxDQUFFLEVBQzFDQSxrTkFBeUMsSUFBSSxDQUFFLEVBQzlDO0FBRUYsb0RBQW9EO0FBQzdDLE1BQU1ILGVBQWUsSUFBTUMsbUVBQW9CQSxDQUNyREUsMENBQW9DLElBQUksQ0FBRSxFQUMxQ0EsUUFBUUMsR0FBRyxDQUFDRyx5QkFBeUIsSUFBSUosa05BQXlDLElBQUksQ0FBRSxFQUN2RiIsInNvdXJjZXMiOlsid2VicGFjazovL2xhYnVidXMtY2hlY2tlci8uL2xpYi9kYi50cz8xZGYwIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGNyZWF0ZUNsaWVudCBhcyBjcmVhdGVTdXBhYmFzZUNsaWVudCB9IGZyb20gXCJAc3VwYWJhc2Uvc3VwYWJhc2UtanNcIjtcblxuZXhwb3J0IGNvbnN0IHN1cGFiYXNlID0gY3JlYXRlU3VwYWJhc2VDbGllbnQoXG5cdHByb2Nlc3MuZW52Lk5FWFRfUFVCTElDX1NVUEFCQVNFX1VSTCB8fCBcIlwiLFxuXHRwcm9jZXNzLmVudi5ORVhUX1BVQkxJQ19TVVBBQkFTRV9BTk9OX0tFWSB8fCBcIlwiXG4pO1xuXG4vLyBFeHBvcnQgY3JlYXRlQ2xpZW50IGZvciB0aGUgZW5oYW5jZWQgdXNhZ2Ugc3lzdGVtXG5leHBvcnQgY29uc3QgY3JlYXRlQ2xpZW50ID0gKCkgPT4gY3JlYXRlU3VwYWJhc2VDbGllbnQoXG5cdHByb2Nlc3MuZW52Lk5FWFRfUFVCTElDX1NVUEFCQVNFX1VSTCB8fCBcIlwiLFxuXHRwcm9jZXNzLmVudi5TVVBBQkFTRV9TRVJWSUNFX1JPTEVfS0VZIHx8IHByb2Nlc3MuZW52Lk5FWFRfUFVCTElDX1NVUEFCQVNFX0FOT05fS0VZIHx8IFwiXCJcbik7XG5cbmV4cG9ydCB0eXBlIEhpc3RvcnlJdGVtID0ge1xuXHRpZDogc3RyaW5nO1xuXHR1c2VyX2lkPzogc3RyaW5nIHwgbnVsbDtcblx0aW1hZ2VfdXJsOiBzdHJpbmc7XG5cdGxhYmVsOiBcIkxpa2VseSBBdXRoZW50aWNcIiB8IFwiU3VzcGljaW91c1wiIHwgXCJGYWtlXCI7XG5cdHJlYXNvbjogc3RyaW5nO1xuXHRjb25maWRlbmNlOiBudW1iZXI7XG5cdGNyZWF0ZWRfYXQ6IHN0cmluZztcbn07XG4iXSwibmFtZXMiOlsiY3JlYXRlQ2xpZW50IiwiY3JlYXRlU3VwYWJhc2VDbGllbnQiLCJzdXBhYmFzZSIsInByb2Nlc3MiLCJlbnYiLCJORVhUX1BVQkxJQ19TVVBBQkFTRV9VUkwiLCJORVhUX1BVQkxJQ19TVVBBQkFTRV9BTk9OX0tFWSIsIlNVUEFCQVNFX1NFUlZJQ0VfUk9MRV9LRVkiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(api)/./lib/db.ts\n");

/***/ }),

/***/ "(api)/./lib/usage-enhanced.ts":
/*!*******************************!*\
  !*** ./lib/usage-enhanced.ts ***!
  \*******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   addPaidChecks: () => (/* binding */ addPaidChecks),\n/* harmony export */   checkRateLimit: () => (/* binding */ checkRateLimit),\n/* harmony export */   deductPaidCheck: () => (/* binding */ deductPaidCheck),\n/* harmony export */   detectAbuse: () => (/* binding */ detectAbuse),\n/* harmony export */   getClientFingerprint: () => (/* binding */ getClientFingerprint),\n/* harmony export */   getUsageStats: () => (/* binding */ getUsageStats),\n/* harmony export */   hashIP: () => (/* binding */ hashIP),\n/* harmony export */   hashUserAgent: () => (/* binding */ hashUserAgent),\n/* harmony export */   logUsage: () => (/* binding */ logUsage)\n/* harmony export */ });\n/* harmony import */ var crypto__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! crypto */ \"crypto\");\n/* harmony import */ var crypto__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(crypto__WEBPACK_IMPORTED_MODULE_0__);\n\n// Mock database for testing\nconst mockSupabase = {\n    from: (table)=>({\n            select: (columns = \"*\")=>({\n                    eq: (column, value)=>({\n                            gte: (column, value)=>({\n                                    single: ()=>Promise.resolve({\n                                            data: null,\n                                            error: null\n                                        }),\n                                    then: (callback)=>Promise.resolve(callback({\n                                            data: [],\n                                            error: null\n                                        }))\n                                }),\n                            then: (callback)=>Promise.resolve(callback({\n                                    data: [],\n                                    error: null\n                                }))\n                        }),\n                    gte: (column, value)=>({\n                            then: (callback)=>Promise.resolve(callback({\n                                    data: [],\n                                    error: null\n                                }))\n                        }),\n                    then: (callback)=>Promise.resolve(callback({\n                            data: [],\n                            error: null\n                        }))\n                }),\n            insert: (data)=>Promise.resolve({\n                    data: null,\n                    error: null\n                }),\n            update: (data)=>({\n                    eq: (column, value)=>({\n                            eq: (column, value)=>({\n                                    select: (columns)=>({\n                                            single: ()=>Promise.resolve({\n                                                    data: {\n                                                        remaining_checks: 5\n                                                    },\n                                                    error: null\n                                                })\n                                        })\n                                }),\n                            select: (columns)=>({\n                                    single: ()=>Promise.resolve({\n                                            data: {\n                                                remaining_checks: 5\n                                            },\n                                            error: null\n                                        })\n                                })\n                        }),\n                    select: (columns)=>({\n                            single: ()=>Promise.resolve({\n                                    data: {\n                                        remaining_checks: 5\n                                    },\n                                    error: null\n                                })\n                        })\n                }),\n            raw: (query)=>query\n        })\n};\n// Use mock database in test environment, real database otherwise\nfunction createClient() {\n    if (false) {}\n    // Import real database client\n    const { createClient: createRealClient } = __webpack_require__(/*! ./db */ \"(api)/./lib/db.ts\");\n    const client = createRealClient();\n    console.log(\"\\uD83D\\uDD27 Usage enhanced client created\");\n    return client;\n}\n// Privacy-compliant hashing for GDPR/CCPA compliance\n// These functions create one-way hashes that cannot be reversed to original IP/UA\nfunction hashIP(ip) {\n    // Hash IP with salt for privacy - cannot be reversed to original IP\n    const salt = process.env.IP_HASH_SALT || \"default-salt-change-in-production\";\n    return crypto__WEBPACK_IMPORTED_MODULE_0___default().createHash(\"sha256\").update(ip + salt).digest(\"hex\").substring(0, 16);\n}\nfunction hashUserAgent(userAgent) {\n    // Hash user agent with salt for privacy - cannot be reversed to original UA\n    const salt = process.env.UA_HASH_SALT || \"default-salt-change-in-production\";\n    return crypto__WEBPACK_IMPORTED_MODULE_0___default().createHash(\"sha256\").update(userAgent + salt).digest(\"hex\").substring(0, 16);\n}\nfunction getClientFingerprint(req) {\n    // Get real IP (considering proxies)\n    const ip = req.headers[\"x-forwarded-for\"]?.split(\",\")[0] || req.headers[\"x-real-ip\"] || req.connection?.remoteAddress || req.socket?.remoteAddress || \"127.0.0.1\";\n    const userAgent = req.headers[\"user-agent\"] || \"unknown\";\n    return {\n        ipHash: hashIP(ip),\n        uaHash: hashUserAgent(userAgent)\n    };\n}\nasync function getUsageStats(userId, ipHash, uaHash) {\n    const supabase = createClient();\n    const now = new Date();\n    // Calculate the start of the current week (Monday)\n    const weekStart = new Date(now);\n    const dayOfWeek = now.getDay();\n    const daysToMonday = dayOfWeek === 0 ? 6 : dayOfWeek - 1; // Sunday = 0, so 6 days back to Monday\n    weekStart.setDate(now.getDate() - daysToMonday);\n    weekStart.setHours(0, 0, 0, 0);\n    console.log(\"Getting usage stats for:\", {\n        userId,\n        ipHash,\n        uaHash,\n        weekStart: weekStart.toISOString()\n    });\n    console.log(\"UserId type:\", typeof userId, \"Value:\", userId);\n    // Get free checks used in the current week\n    let freeUsageQuery = supabase.from(\"usage_logs\").select(\"*\").gte(\"created_at\", weekStart.toISOString());\n    if (userId) {\n        // For authenticated users, count only free checks for this user\n        freeUsageQuery = freeUsageQuery.eq(\"user_id\", userId).eq(\"check_type\", \"free\");\n    } else {\n        // For anonymous users, count all checks (they're all free)\n        freeUsageQuery = freeUsageQuery.is(\"user_id\", null);\n    }\n    const { data: freeUsage, error: freeError } = await freeUsageQuery;\n    if (freeError) {\n        console.error(\"Error fetching free usage:\", freeError);\n    }\n    console.log(\"Free usage data:\", freeUsage);\n    const freeChecksUsed = freeUsage?.length || 0;\n    // Get paid checks remaining for user\n    let paidChecksRemaining = 0;\n    if (userId) {\n        console.log(\"\\uD83D\\uDD0D Fetching paid checks for user:\", userId);\n        const { data: user, error: userError } = await supabase.from(\"profiles\").select(\"remaining_checks\").eq(\"id\", userId).single();\n        if (userError) {\n            console.error(\"Error fetching user profile for paid checks:\", userError);\n            // If profile doesn't exist, create it\n            if (userError.code === \"PGRST116\") {\n                console.log(\"\\uD83D\\uDD27 User profile not found, creating one...\");\n                const { error: createError } = await supabase.from(\"profiles\").insert({\n                    id: userId,\n                    remaining_checks: 0\n                });\n                if (createError) {\n                    console.error(\"Error creating user profile:\", createError);\n                } else {\n                    console.log(\"\\uD83D\\uDD27 User profile created successfully\");\n                }\n            }\n        } else {\n            console.log(\"\\uD83D\\uDD0D User profile data:\", user);\n        }\n        paidChecksRemaining = user?.remaining_checks || 0;\n        console.log(\"\\uD83D\\uDD0D Paid checks remaining:\", paidChecksRemaining);\n    }\n    // Get total checks this week (for abuse detection)\n    const { data: totalUsage } = await supabase.from(\"usage_logs\").select(\"*\").gte(\"created_at\", weekStart.toISOString());\n    const totalChecksThisWeek = totalUsage?.length || 0;\n    // Check if user is limited (3 free checks per week)\n    const isLimited = freeChecksUsed >= 3;\n    console.log(\"isLimited calculation:\", {\n        freeChecksUsed,\n        isLimited\n    });\n    const result = {\n        freeChecksUsed,\n        paidChecksRemaining,\n        totalChecksThisWeek,\n        isLimited\n    };\n    console.log(\"Usage stats result:\", result);\n    return result;\n}\nasync function logUsage(userId, ipHash, uaHash, checkType) {\n    const supabase = createClient();\n    const { data, error } = await supabase.from(\"usage_logs\").insert({\n        user_id: userId || null,\n        ip_hash: ipHash,\n        user_agent_hash: uaHash,\n        check_type: checkType\n    });\n    if (error) {\n        console.error(\"Failed to log usage:\", error);\n        throw new Error(`Failed to log usage: ${error.message}`);\n    }\n    console.log(\"Successfully logged usage:\", {\n        userId,\n        ipHash,\n        uaHash,\n        checkType\n    });\n}\nasync function checkRateLimit(identifier, action = \"check\") {\n    const supabase = createClient();\n    const now = new Date();\n    const windowStart = new Date(now.getTime() - 60 * 60 * 1000); // 1 hour window\n    // Check current rate limit\n    const { data: existing } = await supabase.from(\"rate_limits\").select(\"*\").eq(\"identifier\", identifier).eq(\"action\", action).gte(\"window_start\", windowStart.toISOString()).single();\n    if (existing) {\n        // If more than 100 checks per hour, block (increased for testing)\n        if (existing.count >= 100) {\n            return false;\n        }\n        // Increment count\n        await supabase.from(\"rate_limits\").update({\n            count: existing.count + 1\n        }).eq(\"id\", existing.id);\n    } else {\n        // Create new rate limit record\n        await supabase.from(\"rate_limits\").insert({\n            identifier,\n            action,\n            count: 1,\n            window_start: now.toISOString()\n        });\n    }\n    return true;\n}\nasync function detectAbuse(ipHash, uaHash) {\n    const supabase = createClient();\n    const now = new Date();\n    // Calculate the start of the current week (Monday)\n    const weekStart = new Date(now);\n    const dayOfWeek = now.getDay();\n    const daysToMonday = dayOfWeek === 0 ? 6 : dayOfWeek - 1; // Sunday = 0, so 6 days back to Monday\n    weekStart.setDate(now.getDate() - daysToMonday);\n    weekStart.setHours(0, 0, 0, 0);\n    // Check for suspicious activity patterns\n    const { data: ipUsage } = await supabase.from(\"usage_logs\").select(\"*\").eq(\"ip_hash\", ipHash).gte(\"created_at\", weekStart.toISOString());\n    const { data: uaUsage } = await supabase.from(\"usage_logs\").select(\"*\").eq(\"user_agent_hash\", uaHash).gte(\"created_at\", weekStart.toISOString());\n    // Flag as abuse if:\n    // - More than 50 checks from same IP this week (increased from daily limit)\n    // - More than 40 checks from same user agent this week (increased from daily limit)\n    // - More than 10 different user agents from same IP this week (increased from daily limit)\n    const ipCount = ipUsage?.length || 0;\n    const uaCount = uaUsage?.length || 0;\n    // Get unique user agents for this IP\n    const { data: uniqueUAs } = await supabase.from(\"usage_logs\").select(\"user_agent_hash\").eq(\"ip_hash\", ipHash).gte(\"created_at\", weekStart.toISOString());\n    const uniqueUACount = new Set(uniqueUAs?.map((u)=>u.user_agent_hash) || []).size;\n    return ipCount > 50 || uaCount > 40 || uniqueUACount > 10;\n}\nasync function deductPaidCheck(userId) {\n    const supabase = createClient();\n    console.log(\"\\uD83D\\uDD27 Deducting paid check for user:\", userId);\n    // First get current remaining_checks\n    const { data: currentProfile, error: fetchError } = await supabase.from(\"profiles\").select(\"remaining_checks\").eq(\"id\", userId).single();\n    if (fetchError) {\n        console.error(\"Error fetching current profile for deduction:\", fetchError);\n        return false;\n    }\n    const currentChecks = currentProfile?.remaining_checks || 0;\n    console.log(\"\\uD83D\\uDD27 Current checks before deduction:\", currentChecks);\n    if (currentChecks <= 0) {\n        console.log(\"\\uD83D\\uDD27 No checks remaining, cannot deduct\");\n        return false;\n    }\n    const newChecks = currentChecks - 1;\n    console.log(\"\\uD83D\\uDD27 Deducting check, new count will be:\", newChecks);\n    // Update with new value\n    const { data, error } = await supabase.from(\"profiles\").update({\n        remaining_checks: newChecks\n    }).eq(\"id\", userId).select(\"remaining_checks\").single();\n    if (error) {\n        console.error(\"Error deducting paid check:\", error);\n        return false;\n    }\n    console.log(\"\\uD83D\\uDD27 Successfully deducted check, new count:\", data?.remaining_checks);\n    return true;\n}\nasync function addPaidChecks(userId, checksToAdd) {\n    const supabase = createClient();\n    // First get current remaining_checks\n    const { data: currentProfile, error: fetchError } = await supabase.from(\"profiles\").select(\"remaining_checks\").eq(\"id\", userId).single();\n    if (fetchError) {\n        console.error(\"Error fetching current profile for addition:\", fetchError);\n        throw new Error(\"Failed to fetch current profile\");\n    }\n    const currentChecks = currentProfile?.remaining_checks || 0;\n    const newChecks = currentChecks + checksToAdd;\n    // Update with new value\n    const { error } = await supabase.from(\"profiles\").update({\n        remaining_checks: newChecks\n    }).eq(\"id\", userId);\n    if (error) {\n        console.error(\"Error adding paid checks:\", error);\n        throw new Error(\"Failed to add paid checks\");\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api)/./lib/usage-enhanced.ts\n");

/***/ }),

/***/ "(api)/./lib/usage-node.ts":
/*!***************************!*\
  !*** ./lib/usage-node.ts ***!
  \***************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   MAX_FREE: () => (/* binding */ MAX_FREE),\n/* harmony export */   WINDOW_MS: () => (/* binding */ WINDOW_MS),\n/* harmony export */   getAnonymousUsageFromCookie: () => (/* binding */ getAnonymousUsageFromCookie),\n/* harmony export */   isAnonymousLimitedFromCookie: () => (/* binding */ isAnonymousLimitedFromCookie),\n/* harmony export */   isFreemiumDisabled: () => (/* binding */ isFreemiumDisabled),\n/* harmony export */   makeSetCookieHeaderForAnonIncrement: () => (/* binding */ makeSetCookieHeaderForAnonIncrement),\n/* harmony export */   parseCookie: () => (/* binding */ parseCookie)\n/* harmony export */ });\nconst MAX_FREE = 3;\nconst WINDOW_MS = 24 * 60 * 60 * 1000;\nfunction isFreemiumDisabled() {\n    return process.env.DISABLE_FREEMIUM_LIMITS === \"true\";\n}\nfunction parseCookie(cookieHeader) {\n    const out = {};\n    if (!cookieHeader) return out;\n    cookieHeader.split(/;\\s*/).forEach((pair)=>{\n        const idx = pair.indexOf(\"=\");\n        if (idx > -1) {\n            const k = decodeURIComponent(pair.slice(0, idx));\n            const v = decodeURIComponent(pair.slice(idx + 1));\n            out[k] = v;\n        }\n    });\n    return out;\n}\nfunction getAnonymousUsageFromCookie(cookieHeader) {\n    const map = parseCookie(cookieHeader);\n    const raw = map[\"anon_checks_v1\"];\n    if (!raw) return {\n        timestamps: []\n    };\n    try {\n        const parsed = JSON.parse(raw);\n        return parsed;\n    } catch  {\n        return {\n            timestamps: []\n        };\n    }\n}\nfunction isAnonymousLimitedFromCookie(cookieHeader) {\n    if (isFreemiumDisabled()) return false;\n    const rec = getAnonymousUsageFromCookie(cookieHeader);\n    const now = Date.now();\n    const inWindow = rec.timestamps.filter((t)=>now - t < WINDOW_MS);\n    return inWindow.length >= MAX_FREE;\n}\nfunction makeSetCookieHeaderForAnonIncrement(cookieHeader) {\n    if (isFreemiumDisabled()) return undefined;\n    const rec = getAnonymousUsageFromCookie(cookieHeader);\n    const now = Date.now();\n    rec.timestamps = rec.timestamps.filter((t)=>now - t < WINDOW_MS);\n    rec.timestamps.push(now);\n    const value = encodeURIComponent(JSON.stringify(rec));\n    return `anon_checks_v1=${value}; Path=/; HttpOnly; SameSite=Lax; Max-Age=${60 * 60 * 24 * 7}`;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaSkvLi9saWIvdXNhZ2Utbm9kZS50cyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7O0FBRU8sTUFBTUEsV0FBVyxFQUFFO0FBQ25CLE1BQU1DLFlBQVksS0FBSyxLQUFLLEtBQUssS0FBSztBQUV0QyxTQUFTQztJQUNmLE9BQU9DLFFBQVFDLEdBQUcsQ0FBQ0MsdUJBQXVCLEtBQUs7QUFDaEQ7QUFFTyxTQUFTQyxZQUFZQyxZQUFxQjtJQUNoRCxNQUFNQyxNQUE4QixDQUFDO0lBQ3JDLElBQUksQ0FBQ0QsY0FBYyxPQUFPQztJQUMxQkQsYUFBYUUsS0FBSyxDQUFDLFFBQVFDLE9BQU8sQ0FBQyxDQUFDQztRQUNuQyxNQUFNQyxNQUFNRCxLQUFLRSxPQUFPLENBQUM7UUFDekIsSUFBSUQsTUFBTSxDQUFDLEdBQUc7WUFDYixNQUFNRSxJQUFJQyxtQkFBbUJKLEtBQUtLLEtBQUssQ0FBQyxHQUFHSjtZQUMzQyxNQUFNSyxJQUFJRixtQkFBbUJKLEtBQUtLLEtBQUssQ0FBQ0osTUFBTTtZQUM5Q0osR0FBRyxDQUFDTSxFQUFFLEdBQUdHO1FBQ1Y7SUFDRDtJQUNBLE9BQU9UO0FBQ1I7QUFFTyxTQUFTVSw0QkFBNEJYLFlBQXFCO0lBQ2hFLE1BQU1ZLE1BQU1iLFlBQVlDO0lBQ3hCLE1BQU1hLE1BQU1ELEdBQUcsQ0FBQyxpQkFBaUI7SUFDakMsSUFBSSxDQUFDQyxLQUFLLE9BQU87UUFBRUMsWUFBWSxFQUFFO0lBQUM7SUFDbEMsSUFBSTtRQUNILE1BQU1DLFNBQVNDLEtBQUtDLEtBQUssQ0FBQ0o7UUFDMUIsT0FBT0U7SUFDUixFQUFFLE9BQU07UUFDUCxPQUFPO1lBQUVELFlBQVksRUFBRTtRQUFDO0lBQ3pCO0FBQ0Q7QUFFTyxTQUFTSSw2QkFBNkJsQixZQUFxQjtJQUNqRSxJQUFJTCxzQkFBc0IsT0FBTztJQUNqQyxNQUFNd0IsTUFBTVIsNEJBQTRCWDtJQUN4QyxNQUFNb0IsTUFBTUMsS0FBS0QsR0FBRztJQUNwQixNQUFNRSxXQUFXSCxJQUFJTCxVQUFVLENBQUNTLE1BQU0sQ0FBQyxDQUFDQyxJQUFNSixNQUFNSSxJQUFJOUI7SUFDeEQsT0FBTzRCLFNBQVNHLE1BQU0sSUFBSWhDO0FBQzNCO0FBRU8sU0FBU2lDLG9DQUFvQzFCLFlBQXFCO0lBQ3hFLElBQUlMLHNCQUFzQixPQUFPZ0M7SUFDakMsTUFBTVIsTUFBTVIsNEJBQTRCWDtJQUN4QyxNQUFNb0IsTUFBTUMsS0FBS0QsR0FBRztJQUNwQkQsSUFBSUwsVUFBVSxHQUFHSyxJQUFJTCxVQUFVLENBQUNTLE1BQU0sQ0FBQyxDQUFDQyxJQUFNSixNQUFNSSxJQUFJOUI7SUFDeER5QixJQUFJTCxVQUFVLENBQUNjLElBQUksQ0FBQ1I7SUFDcEIsTUFBTVMsUUFBUUMsbUJBQW1CZCxLQUFLZSxTQUFTLENBQUNaO0lBQ2hELE9BQU8sQ0FBQyxlQUFlLEVBQUVVLE1BQU0sMENBQTBDLEVBQUUsS0FBSyxLQUFLLEtBQUssRUFBRSxDQUFDO0FBQzlGIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbGFidWJ1cy1jaGVja2VyLy4vbGliL3VzYWdlLW5vZGUudHM/Yjc5NCJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgdHlwZSBDb3VudFJlY29yZCA9IHsgdGltZXN0YW1wczogbnVtYmVyW10gfTtcblxuZXhwb3J0IGNvbnN0IE1BWF9GUkVFID0gMztcbmV4cG9ydCBjb25zdCBXSU5ET1dfTVMgPSAyNCAqIDYwICogNjAgKiAxMDAwO1xuXG5leHBvcnQgZnVuY3Rpb24gaXNGcmVlbWl1bURpc2FibGVkKCk6IGJvb2xlYW4ge1xuXHRyZXR1cm4gcHJvY2Vzcy5lbnYuRElTQUJMRV9GUkVFTUlVTV9MSU1JVFMgPT09ICd0cnVlJztcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHBhcnNlQ29va2llKGNvb2tpZUhlYWRlcj86IHN0cmluZyk6IFJlY29yZDxzdHJpbmcsIHN0cmluZz4ge1xuXHRjb25zdCBvdXQ6IFJlY29yZDxzdHJpbmcsIHN0cmluZz4gPSB7fTtcblx0aWYgKCFjb29raWVIZWFkZXIpIHJldHVybiBvdXQ7XG5cdGNvb2tpZUhlYWRlci5zcGxpdCgvO1xccyovKS5mb3JFYWNoKChwYWlyKSA9PiB7XG5cdFx0Y29uc3QgaWR4ID0gcGFpci5pbmRleE9mKCc9Jyk7XG5cdFx0aWYgKGlkeCA+IC0xKSB7XG5cdFx0XHRjb25zdCBrID0gZGVjb2RlVVJJQ29tcG9uZW50KHBhaXIuc2xpY2UoMCwgaWR4KSk7XG5cdFx0XHRjb25zdCB2ID0gZGVjb2RlVVJJQ29tcG9uZW50KHBhaXIuc2xpY2UoaWR4ICsgMSkpO1xuXHRcdFx0b3V0W2tdID0gdjtcblx0XHR9XG5cdH0pO1xuXHRyZXR1cm4gb3V0O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0QW5vbnltb3VzVXNhZ2VGcm9tQ29va2llKGNvb2tpZUhlYWRlcj86IHN0cmluZyk6IENvdW50UmVjb3JkIHtcblx0Y29uc3QgbWFwID0gcGFyc2VDb29raWUoY29va2llSGVhZGVyKTtcblx0Y29uc3QgcmF3ID0gbWFwW1wiYW5vbl9jaGVja3NfdjFcIl07XG5cdGlmICghcmF3KSByZXR1cm4geyB0aW1lc3RhbXBzOiBbXSB9O1xuXHR0cnkge1xuXHRcdGNvbnN0IHBhcnNlZCA9IEpTT04ucGFyc2UocmF3KSBhcyBDb3VudFJlY29yZDtcblx0XHRyZXR1cm4gcGFyc2VkO1xuXHR9IGNhdGNoIHtcblx0XHRyZXR1cm4geyB0aW1lc3RhbXBzOiBbXSB9O1xuXHR9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpc0Fub255bW91c0xpbWl0ZWRGcm9tQ29va2llKGNvb2tpZUhlYWRlcj86IHN0cmluZyk6IGJvb2xlYW4ge1xuXHRpZiAoaXNGcmVlbWl1bURpc2FibGVkKCkpIHJldHVybiBmYWxzZTtcblx0Y29uc3QgcmVjID0gZ2V0QW5vbnltb3VzVXNhZ2VGcm9tQ29va2llKGNvb2tpZUhlYWRlcik7XG5cdGNvbnN0IG5vdyA9IERhdGUubm93KCk7XG5cdGNvbnN0IGluV2luZG93ID0gcmVjLnRpbWVzdGFtcHMuZmlsdGVyKCh0KSA9PiBub3cgLSB0IDwgV0lORE9XX01TKTtcblx0cmV0dXJuIGluV2luZG93Lmxlbmd0aCA+PSBNQVhfRlJFRTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIG1ha2VTZXRDb29raWVIZWFkZXJGb3JBbm9uSW5jcmVtZW50KGNvb2tpZUhlYWRlcj86IHN0cmluZyk6IHN0cmluZyB8IHVuZGVmaW5lZCB7XG5cdGlmIChpc0ZyZWVtaXVtRGlzYWJsZWQoKSkgcmV0dXJuIHVuZGVmaW5lZDtcblx0Y29uc3QgcmVjID0gZ2V0QW5vbnltb3VzVXNhZ2VGcm9tQ29va2llKGNvb2tpZUhlYWRlcik7XG5cdGNvbnN0IG5vdyA9IERhdGUubm93KCk7XG5cdHJlYy50aW1lc3RhbXBzID0gcmVjLnRpbWVzdGFtcHMuZmlsdGVyKCh0KSA9PiBub3cgLSB0IDwgV0lORE9XX01TKTtcblx0cmVjLnRpbWVzdGFtcHMucHVzaChub3cpO1xuXHRjb25zdCB2YWx1ZSA9IGVuY29kZVVSSUNvbXBvbmVudChKU09OLnN0cmluZ2lmeShyZWMpKTtcblx0cmV0dXJuIGBhbm9uX2NoZWNrc192MT0ke3ZhbHVlfTsgUGF0aD0vOyBIdHRwT25seTsgU2FtZVNpdGU9TGF4OyBNYXgtQWdlPSR7NjAgKiA2MCAqIDI0ICogN31gO1xufVxuIl0sIm5hbWVzIjpbIk1BWF9GUkVFIiwiV0lORE9XX01TIiwiaXNGcmVlbWl1bURpc2FibGVkIiwicHJvY2VzcyIsImVudiIsIkRJU0FCTEVfRlJFRU1JVU1fTElNSVRTIiwicGFyc2VDb29raWUiLCJjb29raWVIZWFkZXIiLCJvdXQiLCJzcGxpdCIsImZvckVhY2giLCJwYWlyIiwiaWR4IiwiaW5kZXhPZiIsImsiLCJkZWNvZGVVUklDb21wb25lbnQiLCJzbGljZSIsInYiLCJnZXRBbm9ueW1vdXNVc2FnZUZyb21Db29raWUiLCJtYXAiLCJyYXciLCJ0aW1lc3RhbXBzIiwicGFyc2VkIiwiSlNPTiIsInBhcnNlIiwiaXNBbm9ueW1vdXNMaW1pdGVkRnJvbUNvb2tpZSIsInJlYyIsIm5vdyIsIkRhdGUiLCJpbldpbmRvdyIsImZpbHRlciIsInQiLCJsZW5ndGgiLCJtYWtlU2V0Q29va2llSGVhZGVyRm9yQW5vbkluY3JlbWVudCIsInVuZGVmaW5lZCIsInB1c2giLCJ2YWx1ZSIsImVuY29kZVVSSUNvbXBvbmVudCIsInN0cmluZ2lmeSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(api)/./lib/usage-node.ts\n");

/***/ }),

/***/ "(api)/./pages/api/check.ts":
/*!****************************!*\
  !*** ./pages/api/check.ts ***!
  \****************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ALLOWED_MIME: () => (/* binding */ ALLOWED_MIME),\n/* harmony export */   MAX_SIZE_BYTES: () => (/* binding */ MAX_SIZE_BYTES),\n/* harmony export */   config: () => (/* binding */ config),\n/* harmony export */   \"default\": () => (/* binding */ handler)\n/* harmony export */ });\n/* harmony import */ var _lib_classifier__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @/lib/classifier */ \"(api)/./lib/classifier.ts\");\n/* harmony import */ var zod__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! zod */ \"zod\");\n/* harmony import */ var _lib_usage_node__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @/lib/usage-node */ \"(api)/./lib/usage-node.ts\");\n/* harmony import */ var _lib_usage_enhanced__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @/lib/usage-enhanced */ \"(api)/./lib/usage-enhanced.ts\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([zod__WEBPACK_IMPORTED_MODULE_1__]);\nzod__WEBPACK_IMPORTED_MODULE_1__ = (__webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__)[0];\n\n\n\n\nconst MAX_SIZE_BYTES = 8 * 1024 * 1024; // 8MB\nconst ALLOWED_MIME = new Set([\n    \"image/jpeg\",\n    \"image/png\",\n    \"image/heic\",\n    \"image/heif\",\n    \"image/webp\"\n]);\nconst MetaSchema = zod__WEBPACK_IMPORTED_MODULE_1__.z.record(zod__WEBPACK_IMPORTED_MODULE_1__.z.string(), zod__WEBPACK_IMPORTED_MODULE_1__.z.string()).optional();\nconst config = {\n    api: {\n        bodyParser: false,\n        externalResolver: false\n    }\n};\nfunction parseMultipart(req) {\n    return new Promise((resolve, reject)=>{\n        const busboy = __webpack_require__(/*! busboy */ \"busboy\");\n        const bb = busboy({\n            headers: req.headers\n        });\n        let fileBuffer;\n        let mime = \"\";\n        let filename = \"\";\n        const meta = {};\n        bb.on(\"file\", (_name, file, info)=>{\n            mime = info.mimeType || info.mimetype || \"\";\n            filename = info.filename || \"upload\";\n            const chunks = [];\n            file.on(\"data\", (d)=>{\n                chunks.push(d);\n                if (Buffer.concat(chunks).length > MAX_SIZE_BYTES) {\n                    bb.emit(\"error\", new Error(\"FILE_TOO_LARGE\"));\n                    file.resume();\n                }\n            });\n            file.on(\"end\", ()=>{\n                fileBuffer = Buffer.concat(chunks);\n            });\n        });\n        bb.on(\"field\", (name, val)=>{\n            meta[name] = val;\n        });\n        bb.on(\"error\", reject);\n        bb.on(\"close\", ()=>resolve({\n                file: fileBuffer ? {\n                    buffer: fileBuffer,\n                    mimetype: mime,\n                    filename\n                } : undefined,\n                meta\n            }));\n        req.pipe(bb);\n    });\n}\nasync function handler(req, res) {\n    if (req.method !== \"POST\") return res.status(405).json({\n        error: \"Method not allowed\"\n    });\n    // Get client fingerprint for abuse prevention\n    const { ipHash, uaHash } = (0,_lib_usage_enhanced__WEBPACK_IMPORTED_MODULE_3__.getClientFingerprint)(req);\n    // Get user ID from headers (if available)\n    const userId = req.headers[\"x-user-id\"];\n    // Check rate limiting (10 requests per hour per IP)\n    const rateLimitOk = await (0,_lib_usage_enhanced__WEBPACK_IMPORTED_MODULE_3__.checkRateLimit)(ipHash, \"check\");\n    if (!rateLimitOk) {\n        return res.status(429).json({\n            error: \"Rate limit exceeded. Please try again later.\"\n        });\n    }\n    // Check for abuse patterns\n    const isAbuse = await (0,_lib_usage_enhanced__WEBPACK_IMPORTED_MODULE_3__.detectAbuse)(ipHash, uaHash);\n    if (isAbuse) {\n        return res.status(429).json({\n            error: \"Suspicious activity detected. Please contact support.\"\n        });\n    }\n    try {\n        const { file, meta } = await parseMultipart(req);\n        const userIdFromForm = meta?.userId;\n        // Use userId from form if available, otherwise from headers\n        const finalUserId = userIdFromForm || userId;\n        // Get usage stats with the correct userId\n        const usageStats = await (0,_lib_usage_enhanced__WEBPACK_IMPORTED_MODULE_3__.getUsageStats)(finalUserId, ipHash, uaHash);\n        // Check if user is limited (legacy cookie check for backward compatibility)\n        // Disabled cookie check since we're using database tracking\n        const cookieLimited = false;\n        // Check if user has exceeded freemium limits\n        console.log(\"\\uD83D\\uDD0D Paywall check:\", {\n            isFreemiumDisabled: (0,_lib_usage_node__WEBPACK_IMPORTED_MODULE_2__.isFreemiumDisabled)(),\n            usageStats,\n            cookieLimited,\n            finalUserId,\n            shouldTriggerPaywall: !(0,_lib_usage_node__WEBPACK_IMPORTED_MODULE_2__.isFreemiumDisabled)() && (usageStats.isLimited || cookieLimited) && !finalUserId\n        });\n        if (!(0,_lib_usage_node__WEBPACK_IMPORTED_MODULE_2__.isFreemiumDisabled)() && (usageStats.isLimited || cookieLimited) && !finalUserId) {\n            console.log(\"\\uD83D\\uDEAB Triggering paywall for anonymous user\");\n            return res.status(402).json({\n                error: \"Paywall\",\n                usage: {\n                    freeChecksUsed: usageStats.freeChecksUsed,\n                    paidChecksRemaining: usageStats.paidChecksRemaining,\n                    checkType: \"free\"\n                }\n            });\n        }\n        // Check if authenticated user has no free checks AND no paid checks\n        if (!(0,_lib_usage_node__WEBPACK_IMPORTED_MODULE_2__.isFreemiumDisabled)() && finalUserId && usageStats.isLimited && usageStats.paidChecksRemaining === 0) {\n            return res.status(402).json({\n                error: \"Paywall\",\n                usage: {\n                    freeChecksUsed: usageStats.freeChecksUsed,\n                    paidChecksRemaining: usageStats.paidChecksRemaining,\n                    checkType: \"free\"\n                }\n            });\n        }\n        if (!file) return res.status(400).json({\n            error: \"Missing file\"\n        });\n        if (!ALLOWED_MIME.has(file.mimetype)) return res.status(400).json({\n            error: \"Invalid file type\"\n        });\n        if (file.buffer.length > MAX_SIZE_BYTES) return res.status(400).json({\n            error: \"File too large\"\n        });\n        const safeMeta = MetaSchema.parse(meta) || {};\n        const dataUrl = `data:${file.mimetype};base64,${file.buffer.toString(\"base64\")}`;\n        // Pass the data URL to the classifier so OpenAI can read it; include original filename in metadata\n        const result = await (0,_lib_classifier__WEBPACK_IMPORTED_MODULE_0__.callImageClassifier)(dataUrl, {\n            ...safeMeta,\n            filename: file.filename || \"upload\"\n        });\n        // Determine check type and log usage\n        let checkType = \"free\";\n        if (finalUserId && usageStats.paidChecksRemaining > 0) {\n            // User has paid checks, use one of those\n            const deducted = await (0,_lib_usage_enhanced__WEBPACK_IMPORTED_MODULE_3__.deductPaidCheck)(finalUserId);\n            if (deducted) {\n                checkType = \"paid\";\n            }\n        }\n        // Always log the usage (free or paid)\n        await (0,_lib_usage_enhanced__WEBPACK_IMPORTED_MODULE_3__.logUsage)(finalUserId || null, ipHash, uaHash, checkType);\n        // Get updated usage stats after logging\n        const updatedUsageStats = await (0,_lib_usage_enhanced__WEBPACK_IMPORTED_MODULE_3__.getUsageStats)(finalUserId, ipHash, uaHash);\n        // Set cookie for anonymous users (legacy support)\n        if (!finalUserId) {\n            const setCookie = (0,_lib_usage_node__WEBPACK_IMPORTED_MODULE_2__.makeSetCookieHeaderForAnonIncrement)(req.headers.cookie);\n            if (setCookie) res.setHeader(\"Set-Cookie\", setCookie);\n        }\n        // Add usage info to response\n        // If freemium limits are disabled, show a more reasonable usage count\n        let displayUsage = {\n            freeChecksUsed: updatedUsageStats.freeChecksUsed,\n            paidChecksRemaining: updatedUsageStats.paidChecksRemaining,\n            checkType\n        };\n        // Override usage display when freemium limits are disabled\n        if ((0,_lib_usage_node__WEBPACK_IMPORTED_MODULE_2__.isFreemiumDisabled)()) {\n            // Show actual usage but don't enforce limits\n            displayUsage = {\n                freeChecksUsed: updatedUsageStats.freeChecksUsed,\n                paidChecksRemaining: updatedUsageStats.paidChecksRemaining,\n                checkType\n            };\n        }\n        const response = {\n            ...result,\n            usage: displayUsage\n        };\n        return res.status(200).json(response);\n    } catch (e) {\n        const msg = e?.message || \"Server error\";\n        if (msg === \"FILE_TOO_LARGE\") return res.status(400).json({\n            error: \"File too large\"\n        });\n        return res.status(500).json({\n            error: msg\n        });\n    }\n}\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api)/./pages/api/check.ts\n");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../webpack-api-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendor-chunks/next"], () => (__webpack_exec__("(api)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fcheck&preferredRegion=&absolutePagePath=.%2Fpages%5Capi%5Ccheck.ts&middlewareConfigBase64=e30%3D!")));
module.exports = __webpack_exports__;

})();